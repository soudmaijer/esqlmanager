package nl.errorsoft.esqlmanager.domain;

import java.io.*;
import com.psychoticsoftware.guardian.Guardian;

public class Registration
{
	private final long[] variableValues = {17, 19, 21};	
	private int eval = 7;
	private String license;

	public Registration( String license )
	{	
		this.license = license;
		
		Guardian.setEquation(new byte[]{0x10, 0x10, 0x10, 0x10, 0x10, 0xFFFFFF9B, 0x10, 0x10, 0x10, 0x42, 
		0x10, 0x11, 0x10, 0x11, 0x10, 0x10, 0x10, 0x10, 0x16, 0x15, 
		0x5B, 0x60, 0x75, 0x74, 0x7F, 0x73, 0x10, 0x10, 0x10, 0x10, 
		0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 
		0x10, 0x10, 0x10, 0x14, 0x10, 0x10, 0x10, 0xFFFFFF86, 0x10, 0x10, 
		0x10, 0x69, 0x5F, 0xFFFFFFD1, 0xFFFFFFFD, 0x40, 0x3F, 0x1D, 0xFFFFFFBB, 0x25, 
		0x10, 0x18, 0x10, 0x18, 0x10, 0x24, 0x10, 0x24, 0x12, 0x11, 
		0x5B, 0x60, 0x10, 0x10, 0x10, 0xFFFFFF86, 0x10, 0x10, 0x10, 0x69, 
		0x5F, 0xFFFFFFD1, 0xFFFFFFFD, 0x40, 0x18, 0x17, 0x5B, 0x60, 0x10, 0x12, 
		0x7A, 0x10, 0xFFFFFFD4, 0x15, 0x42, 0x1A, 0x7A, 0x34, 0x17, 0x20, 
		0x63, 0x61, 0xFFFFFF80, 0x59, 0x29, 0x12, 0xFFFFFFE8, 0x24, 0x66, 0xFFFFFFB4, 
		0xFFFFFFF2, 0x1E, 0x73, 0x3E, 0x29, 0x37, 0x30, 0x6B, 0x22, 0xFFFFFFCC, 
		0xFFFFFFE2, 0xFFFFFFEC, 0xFFFFFF90, 0xFFFFFF9B, 0x22, 0xFFFFFFDA, 0xFFFFFF82, 0x10, 0x66, 0xFFFFFFE5, 
		0xFFFFFFC3, 0x5B, 0x5D, 0x5F, 0xFFFFFFDE, 0x5B, 0xFFFFFFE4, 0x5A, 0xFFFFFFF5, 0xFFFFFFF6, 
		0x40, 0x40, 0x42, 0x40, 0x61, 0x1E, 0x1D, 0xFFFFFF86, 0xFFFFFF80, 0x62, 
		0x41, 0x42, 0xFFFFFFC1, 0x42, 0x42, 0xFFFFFFC4, 0x42, 0x40, 0x66, 0x44, 
		0x40, 0x67, 0x5D, 0x3C, 0xFFFFFF80, 0x61, 0x5D, 0x5F, 0x1E, 0x62, 
		0xFFFFFFF5, 0xFFFFFFF5, 0x59, 0x5F, 0xFFFFFFDE, 0x5E, 0x63, 0x75, 0x74, 0x7F, 
		0x73, 0x10, 0x10, 0x10, 0x14, 0x10, 0x10, 0x10, 0x10, 0x10, 
		0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x3F, 0x1D, 0xFFFFFFBB, 
		0x25, 0x10, 0x18, 0x10, 0x18, 0x10, 0x24, 0x14, 0x13, 0x5B, 
		0x60});

		// No license found? Create one!
		if(!Guardian.hasLicense(license) )
		{	Guardian.makeTrialLicense(license, false);
		}		

	}
	
	public int getEvaluationTime()
	{
		return eval;
	}
	
	public long [] getVariableValues()
	{
		return variableValues;
	}
	
	public boolean isExpired()
	{
		return Guardian.isExpired( license, eval );
	}
	
	public boolean register( String username, String email, String key )
	{
		return Guardian.manualRegistrar( license, username, email, key, this.variableValues );
	}
	
	public void unregister()
	{
		Guardian.makeTrialLicense( license, true );
	}
	
	public String getChallengeKey( String username, String email ) throws IllegalArgumentException
	{
		String returnval = Guardian.getChallengeKey( username, email );
		
		if( returnval.equals("BADUSER") )
			throw new IllegalArgumentException("The username should be 3 characters at least!");
		if( returnval.equals("BADEMAIL") )
			throw new IllegalArgumentException("Not a valid email address!");
		
		return returnval;
	}
	
	public boolean isTrialVersion()
	{
		return Guardian.isTrialVersion( license );
	}
	
	public String getUsername()
	{
		return Guardian.getUsername( license );
	}	
	
	public boolean isRegistered()
	{
		if( Guardian.hasLicense( license ) && !this.isTrialVersion() )
			return true;
		return false;
	}
	
	public int getDaysLeft()
	{
		return Guardian.getDaysLeft( license, eval );
	}
}